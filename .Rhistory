GetURL <- function(symbol, year) {
lower.symbol <- tolower(symbol)
accession.no.raw <- GetAccessionNo(symbol, year, foreign = FALSE)
accession.no <- gsub("-", "" , accession.no.raw)
CIK <- CompanyInfo(symbol)
CIK <- as.numeric(CIK$CIK)
report.period <- ReportPeriod(symbol, CIK, accession.no, accession.no.raw)
report.period <- gsub("-", "" , report.period)
inst.url <- paste0("http://www.sec.gov/Archives/edgar/data/", CIK, "/", accession.no, "/", lower.symbol, "-", report.period, ".xml")
return(inst.url)
}
##   Function to download Instance Document
GetInstFile <- function(url) {
XBRL::xbrlDoAll(url)
}
inst.url <- GetURL(symbol, year)
##   Check if url exits
check <- RCurl::url.exists(inst.url)
if(check == FALSE) {
stop("no XBRL-format filings detected")
}
##   Download Instance Document
instFile <- GetInstFile(inst.url)
return(instFile$role)
##   Get Role ID from Instance Document
role.df <- instFile$role %>%
filter(toupper(description) == "DOCUMENT AND ENTITY INFORMATION")
role.id <- as.character(role.df$roleId)
##   Create statement template from Presentation Linkbase
statement.skeleton <-
instFile$presentation %>%
filter(roleId == role.id)
rowid <- c(1:nrow(statement.skeleton))
statement.skeleton <- mutate(statement.skeleton, rowid = rowid)
##   Merge with Label Linkbase
statement <-
merge(statement.skeleton, instFile$label, by.x = "toElementId", by.y = "elementId") %>%
filter(labelRole == "http://www.xbrl.org/2003/role/label")
return(statement)
# ##   Merge with Fact Linkbase
# statement <- merge(statement, instFile$fact, by.x = "toElementId", by.y = "elementId")
#
# ##   Merge with Context Linkbase
# statement <- merge(statement, instFile$context, by.x = "contextId", by.y = "contextId") %>%
#      arrange(rowid)
#
# ##   Clean combined table
# statement <- subset(statement, is.na(statement$dimension1))
#
# clean.statement <- select(statement, labelString, unitId, fact, contextId, startDate, endDate, rowid)
# clean.statement <- select(clean.statement, -contextId)
#
# colnames(clean.statement)[1] <- "Metric"
# colnames(clean.statement)[2] <- "Units"
# colnames(clean.statement)[3] <- "Amount"
#
# clean.statement <- arrange(clean.statement, rowid)
# clean.statement <- select(clean.statement, -rowid)
# return(clean.statement)
}
GetTest("GOOG", 2015)
#' @import dplyr
GetTest <- function(symbol, year) {
##   Function to acquire Instance Document URL
GetURL <- function(symbol, year) {
lower.symbol <- tolower(symbol)
accession.no.raw <- GetAccessionNo(symbol, year, foreign = FALSE)
accession.no <- gsub("-", "" , accession.no.raw)
CIK <- CompanyInfo(symbol)
CIK <- as.numeric(CIK$CIK)
report.period <- ReportPeriod(symbol, CIK, accession.no, accession.no.raw)
report.period <- gsub("-", "" , report.period)
inst.url <- paste0("http://www.sec.gov/Archives/edgar/data/", CIK, "/", accession.no, "/", lower.symbol, "-", report.period, ".xml")
return(inst.url)
}
##   Function to download Instance Document
GetInstFile <- function(url) {
XBRL::xbrlDoAll(url)
}
inst.url <- GetURL(symbol, year)
##   Check if url exits
check <- RCurl::url.exists(inst.url)
if(check == FALSE) {
stop("no XBRL-format filings detected")
}
##   Download Instance Document
instFile <- GetInstFile(inst.url)
return(instFile$role)
##   Get Role ID from Instance Document
role.df <- instFile$role %>%
filter(toupper(description) == "DOCUMENT AND ENTITY INFORMATION")
role.id <- as.character(role.df$roleId)
##   Create statement template from Presentation Linkbase
statement.skeleton <-
instFile$presentation %>%
filter(roleId == role.id)
rowid <- c(1:nrow(statement.skeleton))
statement.skeleton <- mutate(statement.skeleton, rowid = rowid)
##   Merge with Label Linkbase
statement <-
merge(statement.skeleton, instFile$label, by.x = "toElementId", by.y = "elementId") %>%
filter(labelRole == "http://www.xbrl.org/2003/role/label")
##   Merge with Fact Linkbase
statement <- merge(statement, instFile$fact, by.x = "toElementId", by.y = "elementId")
##   Merge with Context Linkbase
statement <- merge(statement, instFile$context, by.x = "contextId", by.y = "contextId") %>%
arrange(rowid)
##   Clean combined table
statement <- subset(statement, is.na(statement$dimension1))
clean.statement <- select(statement, labelString, unitId, fact, contextId, startDate, endDate, rowid)
clean.statement <- select(clean.statement, -contextId)
colnames(clean.statement)[1] <- "Metric"
colnames(clean.statement)[2] <- "Units"
colnames(clean.statement)[3] <- "Amount"
clean.statement <- arrange(clean.statement, rowid)
clean.statement <- select(clean.statement, -rowid)
return(clean.statement)
}
GetTest("GOOG", 2015)
#' @import dplyr
GetTest <- function(symbol, year) {
##   Function to acquire Instance Document URL
GetURL <- function(symbol, year) {
lower.symbol <- tolower(symbol)
accession.no.raw <- GetAccessionNo(symbol, year, foreign = FALSE)
accession.no <- gsub("-", "" , accession.no.raw)
CIK <- CompanyInfo(symbol)
CIK <- as.numeric(CIK$CIK)
report.period <- ReportPeriod(symbol, CIK, accession.no, accession.no.raw)
report.period <- gsub("-", "" , report.period)
inst.url <- paste0("http://www.sec.gov/Archives/edgar/data/", CIK, "/", accession.no, "/", lower.symbol, "-", report.period, ".xml")
return(inst.url)
}
##   Function to download Instance Document
GetInstFile <- function(url) {
XBRL::xbrlDoAll(url)
}
inst.url <- GetURL(symbol, year)
##   Check if url exits
check <- RCurl::url.exists(inst.url)
if(check == FALSE) {
stop("no XBRL-format filings detected")
}
##   Download Instance Document
instFile <- GetInstFile(inst.url)
return(instFile$role)
##   Get Role ID from Instance Document
role.df <- instFile$role %>%
filter(toupper(description) == "DOCUMENT AND ENTITY INFORMATION")
# role.id <- as.character(role.df$roleId)
#
# ##   Create statement template from Presentation Linkbase
# statement.skeleton <-
#      instFile$presentation %>%
#      filter(roleId == role.id)
#
# rowid <- c(1:nrow(statement.skeleton))
# statement.skeleton <- mutate(statement.skeleton, rowid = rowid)
#
# ##   Merge with Label Linkbase
# statement <-
#      merge(statement.skeleton, instFile$label, by.x = "toElementId", by.y = "elementId") %>%
#      filter(labelRole == "http://www.xbrl.org/2003/role/label")
#
# ##   Merge with Fact Linkbase
# statement <- merge(statement, instFile$fact, by.x = "toElementId", by.y = "elementId")
#
# ##   Merge with Context Linkbase
# statement <- merge(statement, instFile$context, by.x = "contextId", by.y = "contextId") %>%
#      arrange(rowid)
#
# ##   Clean combined table
# statement <- subset(statement, is.na(statement$dimension1))
#
# clean.statement <- select(statement, labelString, unitId, fact, contextId, startDate, endDate, rowid)
# clean.statement <- select(clean.statement, -contextId)
#
# colnames(clean.statement)[1] <- "Metric"
# colnames(clean.statement)[2] <- "Units"
# colnames(clean.statement)[3] <- "Amount"
#
# clean.statement <- arrange(clean.statement, rowid)
# clean.statement <- select(clean.statement, -rowid)
return(clean.statement)
}
GetTest("GOOG", 2015)
#' @import dplyr
GetTest <- function(symbol, year) {
##   Function to acquire Instance Document URL
GetURL <- function(symbol, year) {
lower.symbol <- tolower(symbol)
accession.no.raw <- GetAccessionNo(symbol, year, foreign = FALSE)
accession.no <- gsub("-", "" , accession.no.raw)
CIK <- CompanyInfo(symbol)
CIK <- as.numeric(CIK$CIK)
report.period <- ReportPeriod(symbol, CIK, accession.no, accession.no.raw)
report.period <- gsub("-", "" , report.period)
inst.url <- paste0("http://www.sec.gov/Archives/edgar/data/", CIK, "/", accession.no, "/", lower.symbol, "-", report.period, ".xml")
return(inst.url)
}
##   Function to download Instance Document
GetInstFile <- function(url) {
XBRL::xbrlDoAll(url)
}
inst.url <- GetURL(symbol, year)
##   Check if url exits
check <- RCurl::url.exists(inst.url)
if(check == FALSE) {
stop("no XBRL-format filings detected")
}
##   Download Instance Document
instFile <- GetInstFile(inst.url)
##   Get Role ID from Instance Document
role.df <- instFile$role %>%
filter(toupper(description) == "DOCUMENT AND ENTITY INFORMATION")
role.id <- as.character(role.df$roleId)
##   Create statement template from Presentation Linkbase
statement.skeleton <-
instFile$presentation %>%
filter(roleId == role.id)
rowid <- c(1:nrow(statement.skeleton))
statement.skeleton <- mutate(statement.skeleton, rowid = rowid)
##   Merge with Label Linkbase
statement <-
merge(statement.skeleton, instFile$label, by.x = "toElementId", by.y = "elementId") %>%
filter(labelRole == "http://www.xbrl.org/2003/role/label")
##   Merge with Fact Linkbase
statement <- merge(statement, instFile$fact, by.x = "toElementId", by.y = "elementId")
##   Merge with Context Linkbase
statement <- merge(statement, instFile$context, by.x = "contextId", by.y = "contextId") %>%
arrange(rowid)
return(statement)
#
# ##   Clean combined table
# statement <- subset(statement, is.na(statement$dimension1))
#
# clean.statement <- select(statement, labelString, unitId, fact, contextId, startDate, endDate, rowid)
# clean.statement <- select(clean.statement, -contextId)
#
# colnames(clean.statement)[1] <- "Metric"
# colnames(clean.statement)[2] <- "Units"
# colnames(clean.statement)[3] <- "Amount"
#
# clean.statement <- arrange(clean.statement, rowid)
# clean.statement <- select(clean.statement, -rowid)
return(clean.statement)
}
GetTest("GOOG", 2015)
#' @import dplyr
GetTest <- function(symbol, year) {
##   Function to acquire Instance Document URL
GetURL <- function(symbol, year) {
lower.symbol <- tolower(symbol)
accession.no.raw <- GetAccessionNo(symbol, year, foreign = FALSE)
accession.no <- gsub("-", "" , accession.no.raw)
CIK <- CompanyInfo(symbol)
CIK <- as.numeric(CIK$CIK)
report.period <- ReportPeriod(symbol, CIK, accession.no, accession.no.raw)
report.period <- gsub("-", "" , report.period)
inst.url <- paste0("http://www.sec.gov/Archives/edgar/data/", CIK, "/", accession.no, "/", lower.symbol, "-", report.period, ".xml")
return(inst.url)
}
##   Function to download Instance Document
GetInstFile <- function(url) {
XBRL::xbrlDoAll(url)
}
inst.url <- GetURL(symbol, year)
##   Check if url exits
check <- RCurl::url.exists(inst.url)
if(check == FALSE) {
stop("no XBRL-format filings detected")
}
##   Download Instance Document
instFile <- GetInstFile(inst.url)
##   Get Role ID from Instance Document
role.df <- instFile$role %>%
filter(toupper(description) == "(Narrative) (Details)")
role.id <- as.character(role.df$roleId)
##   Create statement template from Presentation Linkbase
statement.skeleton <-
instFile$presentation %>%
filter(roleId == role.id)
rowid <- c(1:nrow(statement.skeleton))
statement.skeleton <- mutate(statement.skeleton, rowid = rowid)
##   Merge with Label Linkbase
statement <-
merge(statement.skeleton, instFile$label, by.x = "toElementId", by.y = "elementId") %>%
filter(labelRole == "http://www.xbrl.org/2003/role/label")
##   Merge with Fact Linkbase
statement <- merge(statement, instFile$fact, by.x = "toElementId", by.y = "elementId")
##   Merge with Context Linkbase
statement <- merge(statement, instFile$context, by.x = "contextId", by.y = "contextId") %>%
arrange(rowid)
return(statement)
#
# ##   Clean combined table
# statement <- subset(statement, is.na(statement$dimension1))
#
# clean.statement <- select(statement, labelString, unitId, fact, contextId, startDate, endDate, rowid)
# clean.statement <- select(clean.statement, -contextId)
#
# colnames(clean.statement)[1] <- "Metric"
# colnames(clean.statement)[2] <- "Units"
# colnames(clean.statement)[3] <- "Amount"
#
# clean.statement <- arrange(clean.statement, rowid)
# clean.statement <- select(clean.statement, -rowid)
return(clean.statement)
}
GetTest("GOOG", 2015)
#' @import dplyr
GetTest <- function(symbol, year) {
##   Function to acquire Instance Document URL
GetURL <- function(symbol, year) {
lower.symbol <- tolower(symbol)
accession.no.raw <- GetAccessionNo(symbol, year, foreign = FALSE)
accession.no <- gsub("-", "" , accession.no.raw)
CIK <- CompanyInfo(symbol)
CIK <- as.numeric(CIK$CIK)
report.period <- ReportPeriod(symbol, CIK, accession.no, accession.no.raw)
report.period <- gsub("-", "" , report.period)
inst.url <- paste0("http://www.sec.gov/Archives/edgar/data/", CIK, "/", accession.no, "/", lower.symbol, "-", report.period, ".xml")
return(inst.url)
}
##   Function to download Instance Document
GetInstFile <- function(url) {
XBRL::xbrlDoAll(url)
}
inst.url <- GetURL(symbol, year)
##   Check if url exits
check <- RCurl::url.exists(inst.url)
if(check == FALSE) {
stop("no XBRL-format filings detected")
}
##   Download Instance Document
instFile <- GetInstFile(inst.url)
##   Get Role ID from Instance Document
role.df <- instFile$role %>%
filter(toupper(description) == "(Narrative) (Details)")
role.id <- as.character(role.df$roleId)
##   Create statement template from Presentation Linkbase
statement.skeleton <-
instFile$presentation %>%
filter(roleId == role.id)
rowid <- c(1:nrow(statement.skeleton))
statement.skeleton <- mutate(statement.skeleton, rowid = rowid)
# ##   Merge with Label Linkbase
# statement <-
#      merge(statement.skeleton, instFile$label, by.x = "toElementId", by.y = "elementId") %>%
#      filter(labelRole == "http://www.xbrl.org/2003/role/label")
#
# ##   Merge with Fact Linkbase
# statement <- merge(statement, instFile$fact, by.x = "toElementId", by.y = "elementId")
#
# ##   Merge with Context Linkbase
# statement <- merge(statement, instFile$context, by.x = "contextId", by.y = "contextId") %>%
#      arrange(rowid)
#
return(statement.skeleton)
#
# ##   Clean combined table
# statement <- subset(statement, is.na(statement$dimension1))
#
# clean.statement <- select(statement, labelString, unitId, fact, contextId, startDate, endDate, rowid)
# clean.statement <- select(clean.statement, -contextId)
#
# colnames(clean.statement)[1] <- "Metric"
# colnames(clean.statement)[2] <- "Units"
# colnames(clean.statement)[3] <- "Amount"
#
# clean.statement <- arrange(clean.statement, rowid)
# clean.statement <- select(clean.statement, -rowid)
return(clean.statement)
}
GetTest("GOOG", 2015)
#' @import dplyr
GetTest <- function(symbol, year) {
##   Function to acquire Instance Document URL
GetURL <- function(symbol, year) {
lower.symbol <- tolower(symbol)
accession.no.raw <- GetAccessionNo(symbol, year, foreign = FALSE)
accession.no <- gsub("-", "" , accession.no.raw)
CIK <- CompanyInfo(symbol)
CIK <- as.numeric(CIK$CIK)
report.period <- ReportPeriod(symbol, CIK, accession.no, accession.no.raw)
report.period <- gsub("-", "" , report.period)
inst.url <- paste0("http://www.sec.gov/Archives/edgar/data/", CIK, "/", accession.no, "/", lower.symbol, "-", report.period, ".xml")
return(inst.url)
}
##   Function to download Instance Document
GetInstFile <- function(url) {
XBRL::xbrlDoAll(url)
}
inst.url <- GetURL(symbol, year)
##   Check if url exits
check <- RCurl::url.exists(inst.url)
if(check == FALSE) {
stop("no XBRL-format filings detected")
}
##   Download Instance Document
instFile <- GetInstFile(inst.url)
##   Get Role ID from Instance Document
role.df <- instFile$role %>%
filter(toupper(description) == "(Narrative) (Details)")
role.id <- as.character(role.df$roleId)
##   Create statement template from Presentation Linkbase
statement.skeleton <-
instFile$presentation %>%
filter(roleId == role.id)
# rowid <- c(1:nrow(statement.skeleton))
# statement.skeleton <- mutate(statement.skeleton, rowid = rowid)
# ##   Merge with Label Linkbase
# statement <-
#      merge(statement.skeleton, instFile$label, by.x = "toElementId", by.y = "elementId") %>%
#      filter(labelRole == "http://www.xbrl.org/2003/role/label")
#
# ##   Merge with Fact Linkbase
# statement <- merge(statement, instFile$fact, by.x = "toElementId", by.y = "elementId")
#
# ##   Merge with Context Linkbase
# statement <- merge(statement, instFile$context, by.x = "contextId", by.y = "contextId") %>%
#      arrange(rowid)
#
return(statement.skeleton)
#
# ##   Clean combined table
# statement <- subset(statement, is.na(statement$dimension1))
#
# clean.statement <- select(statement, labelString, unitId, fact, contextId, startDate, endDate, rowid)
# clean.statement <- select(clean.statement, -contextId)
#
# colnames(clean.statement)[1] <- "Metric"
# colnames(clean.statement)[2] <- "Units"
# colnames(clean.statement)[3] <- "Amount"
#
# clean.statement <- arrange(clean.statement, rowid)
# clean.statement <- select(clean.statement, -rowid)
return(clean.statement)
}
devtools::load_all(".")
devtools::load_all(".")
?finreportr
?finreportr
devtools::load_all(".")
?finreportr
devtools::load_all(".")
devtools::load_all(".")
?finreportr
devtools::load_all(".")
?subset
?dplyr::filter
devtools::load_all(".")
GetIncome("GOOG", 2015)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
?Sys.which
tools::compactPDF
library(installr)
installr()
devtools::load_all(".")
?ggplot2
help(package = "ggplot2")
?rvest
library(ggplot2)
?ggplot2
library(rvest)
?rvest
??rvest
?devtools
library()
?finreportr
?finreportr
devtools::load_all(".")
library(finreportr)
?finreportr
devtools::load_all(".")
?finreportr
?finreportr
library(quantmod)
?quantmod
package?quantmod
package?ggplot2
package?rvest
package?devtools
?finreportr
devtools::load_all(".")
?finreportr
devtools::load_all(".")
?finreportr
?finreportr
devtools::load_all(".")
?finreportr
?finreportr
?ggplot2
devtools::load_all(".")
?finreportr
?finreportr
?CompanyInfo
?AnnualReports
?GetIncome
?GetCashFlow
?GetBalanceSheet
devtools::load_all(".")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("C:\Program Files\qpdf-5.0.1\bin")
getwd()
Sys.getenv("C:/Program Files/qpdf-5.0.1/bin")
Sys.getenv("PATH")
devtools::check()
devtools::release()
